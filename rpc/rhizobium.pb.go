// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/rhizobium.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RunLinuxCmdRequest struct {
	ReqID                string   `protobuf:"bytes,1,opt,name=reqID,proto3" json:"reqID,omitempty"`
	Cmd                  string   `protobuf:"bytes,2,opt,name=cmd,proto3" json:"cmd,omitempty"`
	ExecDir              string   `protobuf:"bytes,3,opt,name=execDir,proto3" json:"execDir,omitempty"`
	ExecUser             string   `protobuf:"bytes,4,opt,name=execUser,proto3" json:"execUser,omitempty"`
	ExecTimeout          int64    `protobuf:"varint,5,opt,name=execTimeout,proto3" json:"execTimeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunLinuxCmdRequest) Reset()         { *m = RunLinuxCmdRequest{} }
func (m *RunLinuxCmdRequest) String() string { return proto.CompactTextString(m) }
func (*RunLinuxCmdRequest) ProtoMessage()    {}
func (*RunLinuxCmdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b1b1b752ee15573, []int{0}
}

func (m *RunLinuxCmdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunLinuxCmdRequest.Unmarshal(m, b)
}
func (m *RunLinuxCmdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunLinuxCmdRequest.Marshal(b, m, deterministic)
}
func (m *RunLinuxCmdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunLinuxCmdRequest.Merge(m, src)
}
func (m *RunLinuxCmdRequest) XXX_Size() int {
	return xxx_messageInfo_RunLinuxCmdRequest.Size(m)
}
func (m *RunLinuxCmdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunLinuxCmdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunLinuxCmdRequest proto.InternalMessageInfo

func (m *RunLinuxCmdRequest) GetReqID() string {
	if m != nil {
		return m.ReqID
	}
	return ""
}

func (m *RunLinuxCmdRequest) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *RunLinuxCmdRequest) GetExecDir() string {
	if m != nil {
		return m.ExecDir
	}
	return ""
}

func (m *RunLinuxCmdRequest) GetExecUser() string {
	if m != nil {
		return m.ExecUser
	}
	return ""
}

func (m *RunLinuxCmdRequest) GetExecTimeout() int64 {
	if m != nil {
		return m.ExecTimeout
	}
	return 0
}

type RunLinuxCmdResponse struct {
	ReqID                string   `protobuf:"bytes,1,opt,name=reqID,proto3" json:"reqID,omitempty"`
	RetCode              int64    `protobuf:"varint,2,opt,name=retCode,proto3" json:"retCode,omitempty"`
	RetContent           string   `protobuf:"bytes,3,opt,name=retContent,proto3" json:"retContent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunLinuxCmdResponse) Reset()         { *m = RunLinuxCmdResponse{} }
func (m *RunLinuxCmdResponse) String() string { return proto.CompactTextString(m) }
func (*RunLinuxCmdResponse) ProtoMessage()    {}
func (*RunLinuxCmdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b1b1b752ee15573, []int{1}
}

func (m *RunLinuxCmdResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunLinuxCmdResponse.Unmarshal(m, b)
}
func (m *RunLinuxCmdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunLinuxCmdResponse.Marshal(b, m, deterministic)
}
func (m *RunLinuxCmdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunLinuxCmdResponse.Merge(m, src)
}
func (m *RunLinuxCmdResponse) XXX_Size() int {
	return xxx_messageInfo_RunLinuxCmdResponse.Size(m)
}
func (m *RunLinuxCmdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunLinuxCmdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunLinuxCmdResponse proto.InternalMessageInfo

func (m *RunLinuxCmdResponse) GetReqID() string {
	if m != nil {
		return m.ReqID
	}
	return ""
}

func (m *RunLinuxCmdResponse) GetRetCode() int64 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *RunLinuxCmdResponse) GetRetContent() string {
	if m != nil {
		return m.RetContent
	}
	return ""
}

func init() {
	proto.RegisterType((*RunLinuxCmdRequest)(nil), "rpc.RunLinuxCmdRequest")
	proto.RegisterType((*RunLinuxCmdResponse)(nil), "rpc.RunLinuxCmdResponse")
}

func init() { proto.RegisterFile("rpc/rhizobium.proto", fileDescriptor_6b1b1b752ee15573) }

var fileDescriptor_6b1b1b752ee15573 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x8d, 0x6b, 0xad, 0x9d, 0x5e, 0x64, 0x2a, 0x38, 0xf4, 0x20, 0x21, 0xa7, 0x9e, 0x22,
	0xe8, 0x1b, 0xd8, 0x5e, 0x04, 0x41, 0x58, 0xf4, 0x05, 0xba, 0x19, 0x70, 0x0f, 0xd9, 0xdd, 0x4e,
	0x76, 0xa1, 0xf8, 0x1c, 0x3e, 0xb0, 0x64, 0x6b, 0x24, 0x12, 0xbc, 0xfd, 0xff, 0x37, 0x87, 0xf9,
	0xf8, 0x61, 0x25, 0xc1, 0xdc, 0xcb, 0x87, 0xfd, 0xf4, 0x7b, 0x9b, 0xda, 0x3a, 0x88, 0x8f, 0x1e,
	0x95, 0x04, 0x53, 0x7d, 0x15, 0x80, 0x3a, 0xb9, 0x17, 0xeb, 0xd2, 0x71, 0xdb, 0x36, 0x9a, 0x0f,
	0x89, 0xbb, 0x88, 0x37, 0x30, 0x13, 0x3e, 0x3c, 0xef, 0xa8, 0x28, 0x8b, 0xcd, 0x42, 0x9f, 0x0a,
	0x5e, 0x83, 0x32, 0x6d, 0x43, 0xe7, 0x99, 0xf5, 0x11, 0x09, 0xe6, 0x7c, 0x64, 0xb3, 0xb3, 0x42,
	0x2a, 0xd3, 0xa1, 0xe2, 0x1a, 0xae, 0xfa, 0xf8, 0xde, 0xb1, 0xd0, 0x45, 0x3e, 0xfd, 0x76, 0x2c,
	0x61, 0xd9, 0xe7, 0x37, 0xdb, 0xb2, 0x4f, 0x91, 0x66, 0x65, 0xb1, 0x51, 0x7a, 0x8c, 0x2a, 0x86,
	0xd5, 0x1f, 0xab, 0x2e, 0x78, 0xd7, 0xf1, 0x3f, 0x5a, 0x04, 0x73, 0xe1, 0xb8, 0xf5, 0x0d, 0x67,
	0x35, 0xa5, 0x87, 0x8a, 0x77, 0x00, 0x39, 0xba, 0xc8, 0x2e, 0xfe, 0x18, 0x8e, 0xc8, 0xc3, 0x2b,
	0x2c, 0xf4, 0xb0, 0x0a, 0x3e, 0xc1, 0x72, 0xf4, 0x13, 0x6f, 0x6b, 0x09, 0xa6, 0x9e, 0x6e, 0xb3,
	0xa6, 0xe9, 0xe1, 0xa4, 0x57, 0x9d, 0xed, 0x2f, 0xf3, 0xb4, 0x8f, 0xdf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x01, 0x14, 0xab, 0x86, 0x71, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RhizobiumClient is the client API for Rhizobium service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RhizobiumClient interface {
	RunLinuxCmd(ctx context.Context, in *RunLinuxCmdRequest, opts ...grpc.CallOption) (*RunLinuxCmdResponse, error)
}

type rhizobiumClient struct {
	cc *grpc.ClientConn
}

func NewRhizobiumClient(cc *grpc.ClientConn) RhizobiumClient {
	return &rhizobiumClient{cc}
}

func (c *rhizobiumClient) RunLinuxCmd(ctx context.Context, in *RunLinuxCmdRequest, opts ...grpc.CallOption) (*RunLinuxCmdResponse, error) {
	out := new(RunLinuxCmdResponse)
	err := c.cc.Invoke(ctx, "/rpc.Rhizobium/RunLinuxCmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RhizobiumServer is the server API for Rhizobium service.
type RhizobiumServer interface {
	RunLinuxCmd(context.Context, *RunLinuxCmdRequest) (*RunLinuxCmdResponse, error)
}

// UnimplementedRhizobiumServer can be embedded to have forward compatible implementations.
type UnimplementedRhizobiumServer struct {
}

func (*UnimplementedRhizobiumServer) RunLinuxCmd(ctx context.Context, req *RunLinuxCmdRequest) (*RunLinuxCmdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunLinuxCmd not implemented")
}

func RegisterRhizobiumServer(s *grpc.Server, srv RhizobiumServer) {
	s.RegisterService(&_Rhizobium_serviceDesc, srv)
}

func _Rhizobium_RunLinuxCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunLinuxCmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RhizobiumServer).RunLinuxCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Rhizobium/RunLinuxCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RhizobiumServer).RunLinuxCmd(ctx, req.(*RunLinuxCmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rhizobium_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Rhizobium",
	HandlerType: (*RhizobiumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunLinuxCmd",
			Handler:    _Rhizobium_RunLinuxCmd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/rhizobium.proto",
}
